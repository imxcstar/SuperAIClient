@using Microsoft.JSInterop;
@using SuperAI.Client.Services.UIService;
@using SuperAI.Client.Component.ChatMsgList;
@inject IScrollService ScrollService;
@inject IJSRuntime JSRuntime

<div class="chat-container @Class" @ref="@_contentDiv" style="@Style">
    <MMenu @bind-Value="showMenu"
           PositionX="X"
           PositionY="Y"
           Absolute
           OffsetY>
        <MList>
            <MListItem>
                <MListItemContent>
                    <MButton Depressed Rounded Text>
                        <MIcon Color="grey darken-3">mdi-delete-outline</MIcon>删除
                    </MButton>
                </MListItemContent>
            </MListItem>
        </MList>
    </MMenu>
    @foreach (var item in Items)
    {
        @switch (item.UserType)
        {
            case ChatUserType.Sender:
                <div class="message-box">
                    <div class="message-wrapper message-right" id="@item.Id">
                        <div class="message">
                            <div class="message-content">
                                <MMarkdownIt @oncontextmenu="ShowMenu" __internal_preventDefault_oncontextmenu Html="@true" Source="@item.Content.Replace("\n","\n\n")" Class="markdown-parser__basic" />
                            </div>
                            <span class="arrow-right"></span>
                        </div>
                        <MMenu Bottom MinWidth="200" OffsetY>
                        <ActivatorContent>
                            <MAvatar Class="avatar" @attributes="@context.Attrs">
                                <MImage Src="@item.HeadIconURL" Alt="头像"></MImage>
                            </MAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <MCard>
                                <MListItemContent Class="justify-center">
                                    <div class="mx-auto text-center">
                                        @*                                            <MButton Depressed Rounded Text OnClick="async ()=>await OnItemEdit.InvokeAsync(item)">
                                <MIcon Color="grey darken-3">mdi-pencil-outline</MIcon>编辑
                                </MButton>
                                <MDivider class="my-3"></MDivider>*@
                                        <MButton Depressed Rounded Text OnClick="async ()=>await OnItemRemove.InvokeAsync(item)">
                                                <MIcon Color="grey darken-3">mdi-delete-outline</MIcon>删除
                                            </MButton>
                                        </div>
                                    </MListItemContent>
                                </MCard>
                            </ChildContent>
                        </MMenu>
                    </div>
                </div>
                break;
            case ChatUserType.Receiver:
                <div class="message-box">
                    <div class="message-wrapper message-left" id="@item.Id">
                        <MMenu Bottom MinWidth="200" OffsetY>
                        <ActivatorContent>
                            <MAvatar Class="avatar" @attributes="@context.Attrs">
                                <MImage Src="@item.HeadIconURL" Alt="头像"></MImage>
                            </MAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <MCard>
                                <MListItemContent Class="justify-center">
                                    <div class="mx-auto text-center">
                                        @*                                        <MButton Depressed Rounded Text OnClick="async ()=>await OnItemEdit.InvokeAsync(item)">
                                <MIcon Color="grey darken-3">mdi-pencil-outline</MIcon>编辑
                                </MButton>
                                <MDivider class="my-3"></MDivider>*@
                                        <MButton Depressed Rounded Text OnClick="async ()=>await OnItemRemove.InvokeAsync(item)">
                                                <MIcon Color="grey darken-3">mdi-delete-outline</MIcon>删除
                                            </MButton>
                                        </div>
                                    </MListItemContent>
                                </MCard>
                            </ChildContent>
                        </MMenu>
                        <div class="message">
                            <div class="message-content">
                                <MMarkdownIt @oncontextmenu="ShowMenu" __internal_preventDefault_oncontextmenu Html="@true" Source="@item.Content" Class="markdown-parser__basic" />
                            </div>
                            <span class="arrow-left"></span>
                        </div>
                    </div>
                </div>
                break;
            default:
                break;
        }
    }
</div>

@code {
    private ElementReference _contentDiv;
    private bool shouldAutoScroll = true;

    bool showMenu = false;
    double X = 0;
    double Y = 0;

    [Parameter]
    public List<ChatMsgItemInfo> Items { get; set; }

    [Parameter]
    public EventCallback<List<ChatMsgItemInfo>> ItemsChanged { get; set; }

    [Parameter]
    public EventCallback<ChatMsgItemInfo> OnItemEdit { get; set; }

    [Parameter]
    public EventCallback<ChatMsgItemInfo> OnItemRemove { get; set; }

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollService.SetupScrollListenerAsync(_contentDiv, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void SetShouldAutoScroll(bool value)
    {
        shouldAutoScroll = value;
    }

    public async Task ScrollToBottomAndWaitElementAsync(string id)
    {
        await ScrollService.ScrollToBottomAndWaitElementAsync(_contentDiv, id);
    }

    public async Task ScrollAutoToBottomAndWaitElementAsync(string id)
    {
        if (shouldAutoScroll)
        {
            await ScrollService.ScrollToBottomAndWaitElementAsync(_contentDiv, id);
        }
    }

    private async Task ShowMenu(MouseEventArgs args)
    {
        //showMenu = false;
        //await Task.Delay(16);

        //X = args.ClientX;
        //Y = args.ClientY;
        //showMenu = true;
    }
}
