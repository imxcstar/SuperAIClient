@using SuperAIClient.Services.StorageService;
@using SuperAIClient.Shared.Component.ChatMsgList
@using SuperAIClient.Shared.Component.HeadConMenu
@using SuperAIClient.Shared.Component.HistoryMsgList;
@inherits LayoutComponentBase
@inject IPopupService PopupService
@inject IStorageService StorageService

<MApp Style="height: 100%">
    <MMain Style="height: 100%">
        <div class="main">
            <div class="left-box">
                <HeadConMenu OnNewChat="OnNewChat" OnClearChat="OnClearChat" OnSetting="OnSetting"></HeadConMenu>
                <div class="msg-box">
                    <HistoryMsgList Items="@_chatInfo.HistoryMsgItem" OnRemoveItem="OnRemoveHistoryMsg" OnSelectItem="OnSelectHistoryMsg" SelectId="@_chatInfo.SelectHistoryMsgId"></HistoryMsgList>
                </div>
            </div>
            <div class="right-box">
                @if (_chatInfo.ChatMsgItem.ContainsKey(_chatInfo.SelectHistoryMsgId))
                {
                    <div class="chat-box">
                        <ChatMsgList Items="@_chatInfo.ChatMsgItem[_chatInfo.SelectHistoryMsgId]" Style="padding-bottom: 5%;"></ChatMsgList>
                    </div>
                    <div class="chat-con-box">
                        <div class="chat-input-box">
                            <textarea class="chat-input-textarea"></textarea>
                            <svg class="chat-input-send-btn" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M22 2L11 13" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                        </div>
                    </div>
                }
            </div>
        </div>
    </MMain>
</MApp>

@code {
    private ChatInfo _chatInfo { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        _chatInfo = new ChatInfo(StorageService);
        return base.SetParametersAsync(parameters);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return Task.Run(async () =>
        {
            await base.OnAfterRenderAsync(firstRender);
            if (firstRender)
            {
                await _chatInfo.LoadAsync();
                if (_chatInfo.HistoryMsgItem.Count == 0)
                    await OnNewChat();
                if (string.IsNullOrWhiteSpace(_chatInfo.OpenAIApiKey))
                {
                    var confirmed = (await PopupService.PromptAsync(
                        "OpenAIAPIKey",
                        "请输入OpenAI的APIKEY"
                    ))?.Trim();
                    if (!string.IsNullOrWhiteSpace(confirmed))
                        _chatInfo.OpenAIApiKey = confirmed;
                }
                await _chatInfo.SaveAsync();
                StateHasChanged();
            }
        });
    }

    public async Task OnNewChat()
    {
        var hmsg = _chatInfo.AddHistoryMsg("新的聊天");
        await OnSelectHistoryMsg(hmsg);
    }

    public async Task OnClearChat()
    {
        _chatInfo.SelectHistoryMsgId = "";
        _chatInfo.HistoryMsgItem.Clear();
        _chatInfo.ChatMsgItem.Clear();
        await _chatInfo.SaveAsync();
    }

    public async Task OnSetting()
    {
        var confirmed = (await PopupService.PromptAsync(
            "OpenAIAPIKey",
            "请输入OpenAI的APIKEY"
        ))?.Trim();
        if (!string.IsNullOrWhiteSpace(confirmed))
            _chatInfo.OpenAIApiKey = confirmed;
        await _chatInfo.SaveAsync();
    }

    public async Task OnRemoveHistoryMsg(HistoryMsgItem item)
    {
        if (item.Id == _chatInfo.SelectHistoryMsgId)
            _chatInfo.SelectHistoryMsgId = "";
        _chatInfo.ChatMsgItem.Remove(item.Id);
        await _chatInfo.SaveAsync();
    }

    public async Task OnSelectHistoryMsg(HistoryMsgItem item)
    {
        _chatInfo.SelectHistoryMsgId = item.Id;
        if (!_chatInfo.ChatMsgItem.ContainsKey(_chatInfo.SelectHistoryMsgId))
        {
            _chatInfo.ChatMsgItem[_chatInfo.SelectHistoryMsgId] = new List<ChatMsgItem>();
        }
        await _chatInfo.SaveAsync();
    }
}